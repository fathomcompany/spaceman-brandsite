@require './global/fonts'

/**
Breakpoints
*/
large = 1410px
desktop = 1200px
tablet-landscape = 1024px
medium = 900px
tablet = 767px
mobile-landscape = 580px
mobile = 500px
mobile-small = 350px

/**
Layout
*/
site-max-w   = 1920px
narrow-max-w = 900px
content-max-w = 1100px

padding-lg  = 120
padding-m   = 80
padding-s   = 30
padding-xs  = 20

body-font-size = initial

/**
Colors
*/
gradient-blue = #CDD3F7
gradient-green = #BAF3BF
gradient-red = #F1A6A0

copy-grey = #5B5B5B
border-grey = #979797
link-green = #ADFFEE
link-green-active = lighten(link-green, 80%)

off-black = #151515

/**
Motion
*/
time-fast = 0.2s
time-reg  = 0.4s
time-slow = 1.5s

smooth-in = cubic-bezier(.19,.91,.36,.99)
smooth-out = cubic-bezier(.19,.91,.36,.99)
smooth-in-out = cubic-bezier(.19,.91,.36,.99)
balanced = cubic-bezier(.34,.2,.1,1)
slow-out = cubic-bezier(.36,.77,.01,1.01)


default-transition(properties, timing = time-fast, easing = smooth-out, delay = 0s)
  properties = properties if length(properties) > 1
  transition-property s(join(', ',properties))
  transition-duration timing
  transition-delay delay
  transition-timing-function easing
  will-change s(join(', ',properties))

/**
 Use this this for any active/hover states, ie:
 +whenActive()
    background-color blue-dark
 */
whenActive()
  &:active,
  &:hover,
  &:focus
    {block}

// Register util stylus mixins
@require '~bukwild-stylus-library';

max-content()
  max-width article-max-w
  margin-left auto
  margin-right auto

default-transition(properties, timing = time-fast, easing = smooth-out, delay = 0s)
  properties = properties if length(properties) > 1
  transition-property s(join(', ',properties))
  transition-duration timing
  transition-delay delay
  transition-timing-function easing
  will-change s(join(', ',properties))


/**
 * Scale a property value between min-size and max-size with the width of the
 * viewport until it is above or below the min-scale-width and max-scale-width
 * values.  The values MUST BE UNITLESS.  This was done so that this could be
 * used with CSS vars (ex: var(--)) and I could find no way in stylus to test
 * for whether an argument was a css var or not; I kept getting fatal errors.
 *
 * Example:
 *
 * .div
 *
 *   // Scales padding between 40px (desktop) and 20px (mobile, 375px)
 *   fluid padding, 40
 *
 *   // Scales font-size between 72px and 32px
 *   fluid font-size, 72, 32
 *
 *   // Scales margin-top from 60px down to 20px, stopping when the browser
 *   // reaches 768px wide
 *   fluid margin-top, 60, 20, null, 768
 */
fluid(property,
	max-size,
	min-size = null,
	max-scale-width = null,
	min-scale-width = 375)

	// The multiplier applied when no min-width was set
	fluid-auto-min-size-factor ?= 0.5

	// Default max-scale-width to the max-width
	unless max-scale-width
		max-scale-width = unit(site-max-w, '')

	// Return the calc expression that sets a scaling value
	if min-size != null
		{property} 'calc(%s * 1px + (%s - %s)/(%s - %s) * (100vw - %s * 1px))' % (min-size max-size min-size max-scale-width min-scale-width min-scale-width)
	else
		{property} 'calc(%s * 1px * %s + (%s - %s * %s)/(%s - %s) * (100vw - %s * 1px))' % (max-size fluid-auto-min-size-factor max-size max-size fluid-auto-min-size-factor max-scale-width min-scale-width min-scale-width)

	// Cap it to min size when small
	@media(max-width min-scale-width * 1px)
		if min-size != null
			{property} 'calc(%s * 1px)' % min-size
		else
			{property} 'calc(%s * 1px * %s)' % (max-size fluid-auto-min-size-factor)

	// Cap it to max size when large
	@media(min-width max-scale-width * 1px)
		{property} 'calc(%s * 1px)' % max-size


/**
 * Reusable styling mixins
 */
guttersVLarge()
  fluid padding-top, padding-lg, padding-m
  fluid padding-bottom, padding-lg, padding-m

guttersVMedium()
  fluid padding-top, padding-m, padding-s
  fluid padding-bottom, padding-m, padding-s

guttersHLarge()
  fluid padding-left, padding-lg, padding-xs
  fluid padding-right, padding-lg, padding-xs

guttersHMedium()
  fluid padding-left, padding-m, padding-s
  fluid padding-right, padding-m, padding-s


placeholder()
	&::-webkit-input-placeholder
		{block}
	&:-moz-placeholder
		{block}
	&::-moz-placeholder
		{block}
	&:-ms-input-placeholder
		{block}

h0()
  font-size 6vw
  @apply leading-semi block;

  @media(min-width large)
    font-size 90px

h1()
  fluid font-size, 72, 30
  @apply leading-none

h2()
  fluid font-size, 36, 24
  @apply leading-tight

h3()
  fluid font-size, 32, 24
  @apply mb-4

p()
  font-medium()
  fluid font-size, 22, 18
